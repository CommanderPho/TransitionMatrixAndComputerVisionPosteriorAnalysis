function results = posterior_batch_import_imfcn(varargin)
%Image Processing Function
%
% VARARGIN - Can contain up to two inputs: 
%   IM - First input is a numeric array containing the image data. 
%   INFO - Second input is a scalar structure containing information about 
%          the input image source.
%
%   INFO can be used to obtain metadata about the image read. 
%   To apply a batch function using the INFO argument, you must select the 
%   Include Image Info check box in the app toolstrip.
%   
% RESULTS - A scalar struct with the processing results.
%
% 
%
%--------------------------------------------------------------------------
% Auto-generated by imageBatchProcessor App. 
%
% When used by the App, this function will be called for each input image
% file automatically.
%
%--------------------------------------------------------------------------

% Input parsing------------------------------------------------------------
im = varargin{1};

if nargin == 2
    % Obtain information about the input image source
    info = varargin{2};
end

% Replace the sample below with your code----------------------------------

% Adjust data to span data range.
im = imadjust(im);
imgray = im2gray(im);
bw = imbinarize(imgray);
% bw = imcomplement(bw);

results.imgray = imgray;
results.bw     = bw;

%% Processing:

% [results.maxEig, results.ridges] = ridgefilt(imgray, 1, 2, 0.5);
sigma = 59; % You can adjust the sigma value
% sigma = [10, 59]; % You can adjust the sigma value
[BW, maskedImage, blurredImg] = fn_segimg_replay_connect(imgray, sigma);
% results.seg.bw = BW;
% results.seg.maskedImage = maskedImage;

results.seg_bw = BW;
results.seg_maskedImage = maskedImage;
results.blurredImg = blurredImg;

results.E = IM.get_ellipse(BW);                % Compute the equivalent ellipse
% expand the .E struct and add fields to results
fields = fieldnames(results.E);
for i = 1:numel(fields)
    results.(fields{i}) = results.E.(fields{i});
end

% Draw the ellipse overlaying the image:
%figure; imshow(BW)
%hold on
%IM.draw_ellipse(E, 'elements', {'ellipse','major','minor','semimajor','direction'}) % , 'color', 'm'

% results.maxEig = maxEig;
% results.ridges = ridges;

%--------------------------------------------------------------------------
